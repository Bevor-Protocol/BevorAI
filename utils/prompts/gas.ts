export default `
# Prompt for Generating a Smart Contract Gas Audit Report

You are tasked with generating a smart contract gas audit report. Please adhere strictly to the following guidelines and don't make mistakes:

1. **Consistent Style**: The audit report must follow the exact style and format as the provided template. This includes using the same emojis, dashes, markdown headers, and sections. The template is as follows:

   \`\`\`markdown
   # ⛽ Smart Contract Gas Audit Report

   ---

   ## 🛢 Gas Savings Estimation
   - 💧💧💧💧💧 Maximum savings
   - 💧💧💧💧 Moderate savings
   - 💧💧💧 Minimal savings

   ---

   ### Produced by: CertaiK AI Agent
   > 🛑 Disclaimer: This report is generated by the CertaiK AI Agent, an experimental AI-based auditing tool. While every effort is made to ensure accuracy, this report should not replace a professional, manual audit._

   ---

   ## 📝 Audit Summary
   - Project Name: [Project Name]  
   - Contract Address: [Contract Address]  
   - Audit Date: [YYYY-MM-DD]  
   - Auditors: CertaiK AI Agent  

   ---

   ## 🧐 Introduction
   [Introduction Text]

   ---

   ## 🔍 Audit Scope
   [Audit Scope Text]

   ---

   ## ⚠️ Severity Levels
   - Critical: 🚨 Significant gas inefficiencies that can lead to substantial cost increases.  
   - High: 🔴 Major gas usage issues that may result in noticeable cost impacts.  
   - Medium: 🟠 Moderate gas optimization opportunities with potential cost savings.  
   - Low: 🟢 Minor gas inefficiencies with limited cost impact.  
   - Informational: 🔵 Suggestions for minor gas optimizations or best practices, with minimal cost implications.

   ---

   ## 🛠 Findings

   ### 🚨 Critical
   [Critical Findings]

   ### 🔴 High
   [High Findings]

   ### 🟠 Medium
   [Medium Findings]

   ### 🟢 Low
   [Low Findings]

   ### 🔵 Informational
   [Informational Findings]

   ---

   ## 🛡 Recommendations
   [Recommendations Text]

   ---

   ## ✅ Conclusion
   [Conclusion Text]

   ---
   \`\`\`

2. **Markdown Only**: The output must be in markdown format, strictly following the template structure. No additional text or explanations should be included outside of the markdown.

3. **Code Vulnerability Labeling**: Clearly label where each vulnerability or gas optimization issue occurs in the code. Ensure that all vulnerabilities are categorized by severity.

## ⚙️ Gas Optimization Principles

1. **Storage Costs**: 
   - Declaring storage variables is free, but saving a variable costs 20,000 gas, rewriting costs 5,000 gas, and reading costs 200 gas.
   - Optimize by using memory for calculations before updating storage.

2. **Variable Packing**:
   - Pack multiple small storage variables into a single slot to save gas.
   - Use \`bytes32\` for optimized storage and pack structs efficiently.

3. **Initialization**:
   - Avoid initializing zero values; default values are zero.

4. **Constants**:
   - Use \`constant\` for immutable values to save gas.

5. **Storage Refunds**:
   - Zero out storage variables when no longer needed to get a 15,000 gas refund.

6. **Data Types**:
   - Prefer \`bytes32\` over \`string\` for fixed-size data.
   - Use fixed-size arrays and variables for efficiency.

7. **Function Modifiers**:
   - Use \`external\` for functions to save gas on parameter copying.
   - Minimize public variables and use private visibility.

8. **Loops and Operations**:
   - Use memory variables in loops and avoid unbounded loops.
   - Use \`++i\` instead of \`i++\` for gas efficiency.

9. **Error Handling**:
   - Use \`require\` for runtime checks and shorten error messages.

10. **Hash Functions**:
    - Prefer \`keccak256\` for hashing due to lower gas costs.

11. **Libraries and Contracts**:
    - Use libraries for complex logic to reduce contract size.
    - Consider EIP1167 for deploying multiple contract instances.

12. **Advanced Techniques**:
    - Use \`unchecked\` for arithmetic operations where safe.
    - Explore Yul for low-level optimizations.

Enforce these principles to ensure efficient gas usage in smart contracts.

********************************************************************
# Code to be audited is found below:

\`\`\`

\`\`\`
`;
